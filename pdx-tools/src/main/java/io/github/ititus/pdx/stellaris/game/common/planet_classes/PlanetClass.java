package io.github.ititus.pdx.stellaris.game.common.planet_classes;

import io.github.ititus.pdx.pdxscript.IPdxScript;
import io.github.ititus.pdx.pdxscript.PdxColor;
import io.github.ititus.pdx.pdxscript.PdxScriptObject;
import org.eclipse.collections.api.map.primitive.ImmutableObjectDoubleMap;

public class PlanetClass {

    public final boolean habitat;
    public final boolean ringworld;
    public final String entity;
    public final String previewEntity;
    public final String overlayEntity;
    public final String picture;
    public final String tileSet;
    public final int itemFrame;
    public final String climate;
    public final double entityScale;
    public final boolean enableTilt;
    public final boolean fixedEntityScale;
    public final boolean placeEntityOnPlanetPlane;
    public final boolean entityFaceObject;
    public final PdxColor atmosphereColor;
    public final double atmosphereIntensity;
    public final double atmosphereWidth;
    public final ImmutableObjectDoubleMap<String> modifiers;
    public final boolean star;
    public final boolean starGfx;
    public final boolean asteroid;
    public final int minDistanceFromSun;
    public final int maxDistanceFromSun;
    public final double spawnOdds;
    public final String cityColorLut;
    public final int extraOrbitSize;
    public final int extraPlanetCount;
    public final int fixedCityLevel;
    public final boolean canBeMoon;
    public final double chanceOfRing;
    public final PlanetSize planetSize;
    public final PlanetSize moonSize;
    public final double productionSpawnChance;
    public final boolean spaceMonsterTarget;
    public final boolean colonizable;
    public final boolean colonizableByEvent;
    public final boolean ideal;
    public final boolean startingPlanet;
    public final boolean showCity;
    public final boolean orbitLines;
    public final boolean hasColonizationInfluenceCost;
    public final boolean isArtificialPlanet;
    public final boolean canBeInvaded;
    public final boolean showHealthBarInPlanetView;
    public final boolean defaultPlanetSelection;
    public final double surveyTimeFactor;
    public final String districtSet;
    public final boolean usesAlternativeSkiesForMoons;

    public PlanetClass(IPdxScript s) {
        PdxScriptObject o = s.expectObject();
        this.habitat = o.getBoolean("habitat", false);
        this.ringworld = o.getBoolean("ringworld", false);
        this.entity = o.getString("entity", null);
        this.previewEntity = o.getString("preview_entity", null);
        this.overlayEntity = o.getString("overlay_entity", null);
        this.picture = o.getString("picture", null);
        this.tileSet = o.getString("tile_set", null);
        this.itemFrame = o.getInt("icon_frame");
        this.climate = o.getString("climate", null);
        this.entityScale = o.getDouble("entity_scale");
        this.enableTilt = o.getBoolean("enable_tilt", true);
        this.fixedEntityScale = o.getBoolean("fixed_entity_scale", false);
        this.placeEntityOnPlanetPlane = o.getBoolean("place_entity_on_planet_plane", true);
        this.entityFaceObject = o.getBoolean("entity_face_object", true);
        this.atmosphereColor = o.getColor("atmosphere_color", null);
        this.atmosphereIntensity = o.getDouble("atmosphere_intensity", 0);
        this.atmosphereWidth = o.getDouble("atmosphere_width", 0);
        this.modifiers = o.getObjectAsEmptyOrStringDoubleMap("modifier");
        this.star = o.getBoolean("star", false);
        this.starGfx = o.getBoolean("star_gfx", this.star);
        this.asteroid = o.getBoolean("asteroid", false);
        this.minDistanceFromSun = o.getInt("min_distance_from_sun", 0);
        this.maxDistanceFromSun = o.getInt("max_distance_from_sun", 0);
        this.spawnOdds = o.getDouble("spawn_odds", 0);
        this.cityColorLut = o.getString("city_color_lut", null);
        this.extraOrbitSize = o.getInt("extra_orbit_size");
        this.extraPlanetCount = o.getInt("extra_planet_count");
        this.fixedCityLevel = o.getInt("fixed_city_level", -1);
        this.canBeMoon = o.getBoolean("can_be_moon", true);
        this.chanceOfRing = o.getDouble("chance_of_ring", 0);
        this.planetSize = o.getScriptAs("planet_size", PlanetSize::new, null);
        this.moonSize = o.getScriptAs("moon_size", PlanetSize::new, null);
        this.productionSpawnChance = o.getDouble("production_spawn_chance", 0);
        this.spaceMonsterTarget = o.getBoolean("space_monster_target", false);
        this.colonizable = o.getBoolean("colonizable");
        this.colonizableByEvent = o.getBoolean("colonizable_by_event", this.colonizable);
        this.ideal = o.getBoolean("ideal", false);
        this.startingPlanet = o.getBoolean("starting_planet", this.colonizable || this.ideal);
        this.showCity = o.getBoolean("show_city", true);
        this.orbitLines = o.getBoolean("orbit_lines", true);
        this.hasColonizationInfluenceCost = o.getBoolean("has_colonization_influence_cost", false);
        this.isArtificialPlanet = o.getBoolean("is_artificial_planet", false);
        this.canBeInvaded = o.getBoolean("can_be_invaded", true);
        this.showHealthBarInPlanetView = o.getBoolean("show_health_bar_in_planet_view", false);
        this.defaultPlanetSelection = o.getBoolean("default_planet_selection", false);
        this.surveyTimeFactor = o.getDouble("survey_time_factor", 1);
        this.districtSet = o.getString("district_set", null);
        this.usesAlternativeSkiesForMoons = o.getBoolean("uses_alternative_skies_for_moons", this.canBeMoon);
    }
}
